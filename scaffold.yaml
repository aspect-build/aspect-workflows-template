# yaml-language-server: $schema=https://hay-kot.github.io/scaffold/schema.json
messages:
  pre: |
    # Welcome to Aspect, the multi-language monorepo dev platform

    Generate boilerplate code for a new Bazel project using Aspect CLI and Aspect Workflows.

  post: |
    # Next Steps

    1. `cd {{ .ProjectSnake }}`, or open that folder in your editor.
    2. Read the developer guide in `/README.bazel.md`.
    3. Try out some commands, such as:
    {{- if .Scaffold.lint }}
      - Format:        `aspect run format`
      - Lint:          `aspect lint //...`
    {{- end }}
      - Run all tests: `aspect test //...`
      - Watch mode:    `./tools/ibazel run //my:devserver`

    4. Add source code and run `aspect configure` to create 
       additional `BUILD.bazel` files.

questions:
  - name: langs
    prompt:
      multi: true
      message: Languages to be used in the project
      options:
        - JavaScript & TypeScript
        - Python
        - Go
        - Java
        - C & C++
        - Rust
  - name: copier
    prompt:
      confirm: Setup code generation?
      description: "Installs https://copier.readthedocs.io/"
      when: "{{ has \"Python\" .langs }}"
  - name: lint
    prompt:
      confirm: Setup format and linting?
      description: "Installs https://github.com/aspect-build/rules_lint"
  - name: stamp
    prompt:
      confirm: Setup version stamping?
      description: "Read more: https://blog.aspect.build/versioning-releases-from-a-monorepo"
  - name: oci
    prompt:
      confirm: Setup OCI Containers?
      description: "Install rules_oci; see https://github.com/bazel-contrib/rules_oci"

features:
  - value: "{{ .Scaffold.copier }}"
    globs:
      - "*/tools/copier"
  - value: "{{ .Scaffold.lint }}"
    globs:
      - "*/tools/format/*"
      - "*/tools/lint/*"
      - "*/.shellcheckrc"
      - "*/.pre-commit-config.yaml"
  - value: "{{ .Scaffold.stamp }}"
    globs:
      - "*/tools/workspace_status.sh"
      - "**/weekly_tag.yaml"
  - value: "{{ .Computed.javascript }}"
    globs:
      - "*/package.json"
      - "*/pnpm-*.yaml"
      - "*/*.config.cjs*"
      - "*/*.config.mjs*"
      - "*/.npmrc"
      - "**/packages/**"
      - "*/tools/pnpm"
      - "*/.aspect/cli/package-json*.star"
  - value: "{{ .Computed.python }}"
    globs:
      - "*/requirements/**"
      - "*/pyproject.toml"
      - "*/gazelle_python.yaml"
      - "*/.aspect/cli/py*.star"
  - value: "{{ .Computed.go }}"
    globs:
      - "*/go.mod"
      - "*/tools/go"
  - value: "{{ .Computed.java }}"
    globs:
      - "*/maven_install.json"
      - "*/pmd.xml"
  - value: "{{ .Computed.cpp }}"
    globs:
      - "*/.clang-tidy"
  - value: "{{ .Scaffold.oci }}"
    globs:
      - "*/tools/oci/BUILD.bazel"
  - value: "{{ and .Scaffold.oci .Computed.python }}"
    globs:
      - "*/.aspect/cli/py3_image.star"
      - "*/tools/oci/py3_image.bzl"
  - value: "{{ and .Scaffold.oci .Computed.go }}"
    globs:
      - "*/.aspect/cli/go_image.star"
      - "*/tools/oci/go_image.bzl"
  - value: "{{ .Computed.rust }}"
    globs:
      - "*/Cargo.toml"
      - "*/tools/cargo"
      - "*/src/main.rs"

computed:
  javascript: "{{ has \"JavaScript & TypeScript\" .Scaffold.langs }}"
  python: "{{ has \"Python\" .Scaffold.langs }}"
  go: "{{ has \"Go\" .Scaffold.langs }}"
  java: "{{ has \"Java\" .Scaffold.langs }}"
  cpp: "{{ has \"C & C++\" .Scaffold.langs }}"
  rust: "{{ has \"Rust\" .Scaffold.langs }}"

presets:
  kitchen-sink:
    lint: true
    langs: ['C & C++', 'JavaScript & TypeScript', 'Python', 'Go', 'Java', 'Rust']
    copier: true
    stamp: true
    oci: true
  go:
    langs: ['Go']
    lint: true
    oci: true
  js:
    langs: ['JavaScript & TypeScript']
    lint: true
  py:
    langs: ['Python']
    lint: true
  java:
    langs: ['Java']
    lint: true
  cpp:
    langs: ['C & C++']
    lint: true
  rust:
    langs: ['Rust']
    lint: true
  minimal:
    langs: []
