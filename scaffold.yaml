# yaml-language-server: $schema=https://hay-kot.github.io/scaffold/schema.json
metadata:
  minumum_version: v0.6.1
messages:
  pre: |
    # Welcome to Aspect, the multi-language monorepo dev platform

    Generate boilerplate code for a new Bazel project using Aspect CLI and Aspect Workflows.

  post: |
    # Next Steps

    1. `cd {{ .ProjectSnake }}`, or open that folder in your editor.
    2. Read the developer guide in `/README.bazel.md`.
    3. Setup your dev environment by running `bazel run tools:bazel_env`
       Note, this requires installing direnv: https://direnv.net/
    4. Try out some commands, such as:
    {{- if .Scaffold.lint }}
      - Format:        `format`
      - Lint:          `aspect lint //...`
    {{- end }}
      - Run all tests: `aspect test //...`
      - Watch mode:    `ibazel run //my:devserver`

    5. Add source code and run `bazel run gazelle` to create 
       additional `BUILD` files.
    
    ðŸŒŸ Star Aspect CLI on GitHub: <https://github.com/aspect-build/aspect-cli>
    ðŸ“¢ Stay up to date: <https://www.linkedin.com/company/aspect-build/>
    ðŸ’¬ Discuss on Bazel Slack: <https://slack.bazel.build> in the #aspect-build channel

questions:
  - name: langs
    validate:
      min: 1
    prompt:
      multi: true
      message: Languages to be used in the project
      options:
        - JavaScript & TypeScript
        - Python
        - Go
        - Java
        - Kotlin
        - C & C++
        - Rust
        - Shell (Bash)
  - name: codegen
    prompt:
      confirm: Setup code generation?
      description: "Installs https://copier.readthedocs.io/ (Python), https://yeoman.io (JS), and https://hay-kot.github.io/scaffold/ (Go)"
  - name: lint
    prompt:
      confirm: Setup format and linting?
      description: "Installs https://github.com/aspect-build/rules_lint"
  - name: stamp
    prompt:
      confirm: Setup version stamping?
      description: "Read more: https://blog.aspect.build/versioning-releases-from-a-monorepo"
  - name: oci
    prompt:
      confirm: Setup OCI Containers?
      description: "Install rules_oci; see https://github.com/bazel-contrib/rules_oci"

features:
  - value: "{{ .Scaffold.lint }}"
    globs:
      - "*/tools/format/*"
      - "*/tools/lint/*"
      - "*/.pre-commit-config.yaml"
  - value: "{{ and .Scaffold.lint .Computed.javascript }}"
    globs:
      - "*/prettier.config.cjs"
      - "*/eslint.config.mjs"
  - value: "{{ .Scaffold.stamp }}"
    globs:
      - "*/tools/workspace_status.sh"
      - "**/weekly_tag.yaml"
  - value: "{{ and .Scaffold.lint .Computed.shell }}"
    globs:
      - "*/.shellcheckrc"
  - value: "{{ .Computed.javascript }}"
    globs:
      - "**/package.json"
      - "*/pnpm-*.yaml"
      - "*/*.config.cjs*"
      - "*/*.config.mjs*"
      - "*/.npmrc"
      - "**/packages/**"
      - "*/.aspect/cli/package-json*.star"
  - value: "{{ .Computed.python }}"
    globs:
      - "*/requirements/**"
      - "*/pyproject.toml"
      - "*/gazelle_python.yaml"
      - "*/.aspect/cli/py*.star"
  - value: "{{ .Computed.go }}"
    globs:
      - "*/go.mod"
      - "*/go.sum"
      - "*/tools/tools.go"
  - value: "{{ .Computed.java }}"
    globs:
      - "*/maven_install.json"
      - "*/tools/java17.bazelrc"
  - value: "{{ and .Scaffold.lint .Computed.java }}"
    globs:
      - "*/pmd.xml"
  - value: "{{ .Computed.cpp }}"
    globs:
      - "*/.clang-tidy"
  - value: "{{ .Scaffold.oci }}"
    globs:
      - "*/tools/oci/BUILD"
  - value: "{{ .Computed.platforms }}"
    globs:
      - "*/tools/platforms/*"
  - value: "{{ and .Scaffold.oci .Computed.python }}"
    globs:
      - "*/.aspect/cli/py3_image.star"
      - "*/tools/oci/py3_image.bzl"
  - value: "{{ and .Scaffold.oci .Computed.go }}"
    globs:
      - "*/.aspect/cli/go_image.star"
      - "*/tools/oci/go_image.bzl"
  - value: "{{ .Computed.rust }}"
    globs:
      - "*/Cargo.toml"
      - "*/src/main.rs"

computed:
  javascript: "{{ has \"JavaScript & TypeScript\" .Scaffold.langs }}"
  python: "{{ has \"Python\" .Scaffold.langs }}"
  go: "{{ has \"Go\" .Scaffold.langs }}"
  java: "{{ has \"Java\" .Scaffold.langs }}"
  kotlin: "{{ has \"Kotlin\" .Scaffold.langs }}"
  cpp: "{{ has \"C & C++\" .Scaffold.langs }}"
  rust: "{{ has \"Rust\" .Scaffold.langs }}"
  shell: "{{ has \"Shell (Bash)\" .Scaffold.langs }}"
  # Do we need to bazel_dep on platforms?
  platforms: "{{ .Scaffold.oci }}"
presets:
  kitchen-sink:
    lint: true
    langs:
      - 'C & C++'
      - 'JavaScript & TypeScript'
      - 'Python'
      - 'Go'
      - 'Kotlin'
      - 'Java'
      - 'Rust'
      - 'Shell (Bash)'
    codegen: true
    stamp: true
    oci: true
  shell:
    langs: ['Shell (Bash)']
    lint: true
  go:
    codegen: true
    langs: ['Go']
    lint: true
    oci: true
  js:
    langs: ['JavaScript & TypeScript']
    codegen: true
    lint: true
  py:
    langs: ['Python']
    codegen: true
    lint: true
  java:
    langs: ['Java']
    lint: true
  kotlin:
    langs: ['Kotlin']
    lint: true
  cpp:
    langs: ['C & C++']
    lint: true
  rust:
    langs: ['Rust']
    lint: true
  minimal:
    langs: []
