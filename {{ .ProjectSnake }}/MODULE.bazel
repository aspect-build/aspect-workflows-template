bazel_dep(name = "aspect_bazel_lib", version = "2.9.4")
{{- if .Scaffold.lint }}
bazel_dep(name = "aspect_rules_lint", version = "1.0.7")
bazel_dep(name = "buildifier_prebuilt", version = "7.3.1")
{{- end }}
bazel_dep(name = "rules_multitool", version = "1.0.0")
{{- if .Computed.javascript }}
bazel_dep(name = "aspect_rules_js", version = "2.1.2")
bazel_dep(name = "aspect_rules_ts", version = "3.3.2")
{{- end }}
{{- if .Computed.java }}
bazel_dep(name = "rules_java", version = "8.6.2")
bazel_dep(name = "rules_jvm_external", version = "6.6")
{{- end }}
{{- if .Computed.python }}
bazel_dep(name = "rules_python", version = "1.0.0")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.0.0")
bazel_dep(name = "aspect_rules_py", version = "1.0.0")
bazel_dep(name = "rules_uv", version = "0.45.0")
{{- end }}
{{- if .Computed.rust }}
bazel_dep(name = "rules_rust", version = "0.54.1")
{{- end }}
{{- if .Computed.go }}
bazel_dep(name = "rules_go", version = "0.50.1")
bazel_dep(name = "gazelle", version = "0.40.0")
{{- end }}
{{- if .Computed.cpp }}
bazel_dep(name = "toolchains_llvm", version = "1.2.0")
{{- end }}
{{- if .Scaffold.oci }}
bazel_dep(name = "rules_oci", version = "2.0.1")
{{- end }}

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools:tools.lock.json")
use_repo(multitool, "multitool")
{{- if .Computed.go }}

#########################
# Go
go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# All *direct* Go dependencies of the module have to be listed explicitly.
# Run 'bazel mod tidy' to update this
use_repo(go_deps)
{{- end }}
{{- if .Computed.javascript }}

#########################
# JavaScript and pnpm package manager
pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to run the same pnpm version that Bazel manages
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")
{{- end}}
{{- if .Computed.python }}

#########################
# Hermetic Python interpreter and pip dependencies
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.12",
)

pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_lock = "//requirements:all.txt",
)
use_repo(pip, "pip")
{{- end }}
{{- if .Computed.cpp }}

#########################
# Hermetic C++ toolchain, to relieve the dependency on a locally installed CC etc.
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    # NB: llvm doesn't release for all platforms on every patch release
    llvm_versions = {
        "": "15.0.6",
        "darwin-aarch64": "15.0.7",
        "darwin-x86_64": "15.0.7",
    },
)
use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")

register_toolchains("@llvm_toolchain//:all")
{{- end }}
{{- if .Computed.rust }}

#########################
# Support for Rust, see https://github.com/bazelbuild/rules_rust
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.75.0"],
)
{{- end }}
{{- if .Computed.java }}

#########################
# Java and other JVM languages:
# https://github.com/bazelbuild/rules_jvm_external/blob/master/examples/bzlmod/MODULE.bazel
# https://github.com/bazelbuild/rules_jvm_external#pinning-artifacts-and-integration-with-bazels-downloader

# In the Maven support variation, the dependencies are conveniently listed here
# in the MODULE.bazel file.
maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = ["io.grpc:grpc-all:1.51.1"],
    lock_file = "//:maven_install.json",
)
use_repo(
    maven,
    "maven",
    "unpinned_maven",
)
{{- end }}


{{- if .Scaffold.oci  }}

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

{{- if .Computed.go }}

# Base image for GO Containers.
oci.pull(
    name = "distroless_base",
    digest = "sha256:ccaef5ee2f1850270d453fdf700a5392534f8d1a8ca2acda391fbb6a06b81c86",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64")
{{- end}}

{{- if .Computed.python }}
oci.pull(
    name = "python_base",
    image = "ubuntu",
    digest = "sha256:b359f1067efa76f37863778f7b6d0e8d911e3ee8efa807ad01fbf5dc1ef9006b",
    platforms = [
        "linux/arm64/v8",
        "linux/amd64",
    ],
)
use_repo(oci, "python_base", "python_base_linux_amd64", "python_base_linux_arm64_v8")
{{- end }}
{{- end}}



