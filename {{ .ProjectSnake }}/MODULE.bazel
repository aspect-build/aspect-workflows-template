bazel_dep(name = "aspect_bazel_lib", version = "2.7.9")
{{- if .Scaffold.lint }}
bazel_dep(name = "aspect_rules_lint", version = "1.0.0-rc5")
bazel_dep(name = "buildifier_prebuilt", version = "6.4.0")
{{- end }}
{{- if .Scaffold.protobuf }}
bazel_dep(name = "rules_proto", version = "6.0.2")
bazel_dep(name = "toolchains_protoc", version = "0.3.1")
{{- end}}
bazel_dep(name = "rules_multitool", version = "0.12.0")
{{- if .Computed.javascript }}
bazel_dep(name = "aspect_rules_js", version = "2.0.0-rc8")
bazel_dep(name = "aspect_rules_ts", version = "3.0.0-rc1")
{{- end }}
{{- if .Computed.python }}
bazel_dep(name = "rules_python", version = "0.34.0")
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.34.0")
bazel_dep(name = "aspect_rules_py", version = "0.7.4")
{{- end }}
{{- if .Computed.go }}
bazel_dep(name = "rules_go", version = "0.49.0")
bazel_dep(name = "gazelle", version = "0.37.0")
{{- end }}

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools:tools.lock.json")
use_repo(multitool, "multitool")
{{- if .Computed.go }}

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# All *direct* Go dependencies of the module have to be listed explicitly.
# Run 'bazel mod tidy' to update this
use_repo(go_deps)
{{- end }}
{{- if .Computed.javascript }}

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to run the same pnpm version that Bazel manages
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")
{{- end}}
{{- if .Computed.python }}

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.12",
)

pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_lock = "//requirements:all.txt",
)
use_repo(pip, "pip")
{{- end }}
{{- if .Scaffold.protobuf }}

register_toolchains(
    "//tools/toolchains:all",
    dev_dependency = True,
)
{{- end }}
