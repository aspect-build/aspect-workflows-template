#!/usr/bin/env bash
# Example user workflows within an `aspect init`-generated repository
# with the Go language enabled.
set -o errexit -o pipefail -o nounset

# The user writes some Go code with external imports
# Maybe they just search for "golang hello world"
# and paste the code found at https://yourbasic.org/golang/http-server-example/
# And then they also add an external dependency on 
# https://pkg.go.dev/nmyk.io/cowsay just for fun.
mkdir -p cmd/hello
cat >cmd/hello/main.go <<EOF
package main

import (
    "net/http"
    "nmyk.io/cowsay"
)

func main() {
    http.HandleFunc("/", HelloServer)
    http.ListenAndServe(":8080", nil)
}

func HelloServer(w http.ResponseWriter, r *http.Request) {
    cowsay.Cow{}.Write(w, []byte("Hello, world!"), false)
}
EOF

# Create/update the go.mod file, including the nmyk.io/cowsay dependency pinning
./tools/go mod tidy
# Update the BUILD files
bazel configure || true
# Run the application, starting a server
bazel run cmd/hello &
# Wait for the server
while ! nc -z localhost 8080; do   
  sleep 0.5
done

output=$(curl localhost:8080)
# Verify the application output matches expectation
[[ "${output}" =~ "Hello, world" ]] || {
    echo >&2 "Wanted output containing 'Hello, world' but got '${output}'"
    exit 1
}

# Shutdown server
kill %1
